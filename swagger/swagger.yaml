swagger: '2.0'
info:
  description: Social network for file sharing
  version: 1.0.0
  title: File Sharing Socila Network
host: 'localhost:8080'
basePath: /
schemes:
  - http
paths:
  /admin:
    post:
      summary: Register User with status admin. Can only be done by admin.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Credentials
          required: true
          schema:
            $ref: '#/definitions/RegistrationForm'
      responses:
        '200':
          description: User was registred
        '403':
          description: No permission.
  /admin/profile:
    post:
      summary: Register User from admin console. Can only be done by admin.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Credentials
          required: true
          schema:
            $ref: '#/definitions/RegistrationForm'
      responses:
        '200':
          description: User was registred
        '400':
          description: Error ocured
          schema:
            $ref: '#/definitions/InvalidRegistrationResponse'
        '403':
          description: No permission.
  '/admin/profile/{userId}':
    put:
      summary: Update user profile from admin console. Can only be done by admin.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: integer
        - in: body
          name: RegistrationForm
          required: true
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '200':
          description: User was updated
          schema:
            $ref: '#/definitions/UserDetails'
        '403':
          description: No permission.
    delete:
      summary: Delete specified user from admin console. Can only be done by admin.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: integer
      responses:
        '200':
          description: User was deleted
          schema:
            $ref: '#/definitions/UserDetails'
        '403':
          description: No permission.
  /registration:
    post:
      summary: Register User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Credentials
          required: true
          schema:
            $ref: '#/definitions/RegistrationForm'
      responses:
        '200':
          description: User was registred
        '400':
          description: Cant register user
          schema:
            $ref: '#/definitions/InvalidRegistrationResponse'
  /login:
    post:
      summary: Login User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Credentials
          required: true
          schema:
            $ref: '#/definitions/CredentialsForm'
      responses:
        '200':
          schema:
            $ref: '#/definitions/UserDetails'
          description: User was logined
        '403':
          description: Wrong credentials
  /logout:
    get:
      summary: Logout user
      responses:
        '200':
          description: User was logout
        '403':
          description: User wasnt login
  /profile:
    put:
      summary: Change currently logined user profile.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Profile
          required: true
          schema:
            $ref: '#/definitions/Profile'
      responses:
        '200':
          description: Successfully change User Profile.
          schema:
            $ref: '#/definitions/UserDetails'
        '400':
          description: Error ocured.
          schema:
            $ref: '#/definitions/ProfileErrors'
        '403':
          description: User wasnt login.
  '/profile/{userId}':
    get:
      summary: Get specified user profile.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
      responses:
        '200':
          description: User profile.
          schema:
            $ref: '#/definitions/UserDetails'
        '403':
          description: User wasnt login or dont have permission to get this profile.
  /messages:
    get:
      summary: Retrn all/'number of latest messages' of logined user.
      parameters:
        - name: numberOfMessages
          in: query
          description: Number of latest messages to be returned if not present return all
          required: false
          type: string
      responses:
        '200':
          description: Return messages to/from logined user
          schema:
            type: array
            items:
              $ref: '#/definitions/Message'
        '403':
          description: User wasnt login
    post:
      summary: Send message from current logined user to specified chat room.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Message
          required: true
          schema:
            $ref: '#/definitions/MessageBody'
      responses:
        '200':
          description: If succesfully send message.
          schema:
            $ref: '#/definitions/Message'
        '400':
          description: If failed to send message.
        '403':
          description: User wasnt login
  /messages/new:
    get:
      summary: Return all/'number of latest messages' to logined user with isNew = true
      parameters:
        - name: numberOfMessages
          in: query
          description: Number of latest messages to be returned if not present return all
          required: true
          type: string
      responses:
        '200':
          description: Return messages to logined user with isNew = true
          schema:
            type: array
            items:
              $ref: '#/definitions/Message'
        '403':
          description: User wasnt login
  '/post/user/{user_id}':
    get:
      summary: Retrun all posts of specified user
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: Id of user
          required: true
          type: string
        - name: numberOfPosts
          in: query
          description: Number of latest posts to be returned if not present return all
          required: false
          type: string
      responses:
        '200':
          description: Return posts for given user id
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        '403':
          description: User wasnt login or dont have permition to see this posts
  /post:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Post
          required: true
          schema:
            $ref: '#/definitions/PostBody'
      summary: Create post for current logined user.
      responses:
        '200':
          description: If succesfully create Post.
          schema:
            $ref: '#/definitions/Post'
        '400':
          description: If failed to create post.
        '403':
          description: User wasnt login
  '/post/{post_id}':
    get:
      summary: Retrun specified post.
      produces:
        - application/json
      parameters:
        - name: post_id
          in: path
          description: Id of post
          required: true
          type: string
      responses:
        '200':
          description: Post representation.
          schema:
            $ref: '#/definitions/Post'
        '403':
          description: User wasnt login or dont have permition to see this posts
    put:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: post_id
          required: true
          type: string
          description: Post id
        - in: body
          name: Post
          required: true
          schema:
            $ref: '#/definitions/PostBody'
      summary: Update post if user have perrmision to do this
      responses:
        '200':
          description: If succesfully send message.
          schema:
            $ref: '#/definitions/Post'
        '400':
          description: If failed to update post.
        '403':
          description: User wasnt login or font have permission to update post.
    delete:
      produces:
        - application/json
      parameters:
        - in: path
          name: post_id
          type: string
          required: true
      summary: Delete post with given id
      responses:
        '200':
          description: If successfully delete post
          schema:
            type: integer
            description: Id of deleted post
        '403':
          description: User wasnt logined or dont have permission to like post
  '/post/{postId}/comment':
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: postId
          type: integer
          required: true
        - in: body
          name: Comment
          required: true
          schema:
            $ref: '#/definitions/CommentBody'
      summary: Add comment to post
      responses:
        '200':
          description: If succesfully comment post.
          schema:
            $ref: '#/definitions/Comment'
        '400':
          description: If failed to comment a post.
        '403':
          description: User wasnt login or dont have perrmision to comment post
  '/post/{postId}/like':
    put:
      summary: Like post
      produces:
        - application/json
      parameters:
        - in: path
          name: postId
          type: integer
          required: true
      responses:
        '200':
          description: If succesfully like post
          schema:
            $ref: '#/definitions/Post'
        '403':
          description: User wasnt login or dont have perrmision to like post
  '/comment/{commentId}/like':
    put:
      summary: Like comment
      produces:
        - application/json
      parameters:
        - in: path
          name: commentId
          type: integer
          required: true
      responses:
        '200':
          description: If successfully like comment
          schema:
            $ref: '#/definitions/Post'
        '403':
          description: User wasnt login or dont have perrmision to like comment
definitions:
  Profile:
    type: object
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      password:
        type: string
  UserDetails:
    type: object
    properties:
      id:
        type: integer
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      friends:
        type: array
        items:
          type: integer
          description: list of friends ids
  RegistrationForm:
    type: object
    required:
      - email
      - firstName
      - lastName
      - password
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
        format: phone
      password:
        type: integer
        format: int32
  CredentialsForm:
    type: object
    properties:
      phoneOrEmail:
        type: string
      password:
        type: integer
        format: int32
  Message:
    type: object
    properties:
      id:
        type: integer
        format: int64
      sendDate:
        type: string
        description: UserId of reciver
      isNew:
        type: boolean
      from:
        type: integer
        format: int64
        description: UserId of sender
      body:
        allOf:
          - $ref: '#/definitions/MessageBody'
  TextMessage:
    type: object
    properties:
      message:
        type: string
  FileMessage:
    type: object
    properties:
      fileDescription:
        type: string
      file:
        type: string
        format: binary
  MessageBody:
    type: object
    properties:
      chatRoomId:
        type: integer
        format: int64
        description: Belong to chat room with this id
      value:
        allOf:
          - $ref: '#/definitions/TextMessage'
          - $ref: '#/definitions/FileMessage'
  Post:
    type: object
    properties:
      post_id:
        type: string
      body:
        allOf:
          - $ref: '#/definitions/PostBody'
      likes:
        type: integer
      comments:
        type: array
        items:
          $ref: '#/definitions/Comment'
      lastUpdateDate:
        type: string
        format: date
  PostBody:
    type: object
    properties:
      post_title:
        type: string
      post_text:
        type: string
      user_id:
        type: string
      files:
        type: array
        items:
          type: string
          format: binary
  Comment:
    type: object
    properties:
      id:
        type: integer
      postId:
        type: integer
      owner:
        type: integer
      creationDate:
        type: string
        format: date
      body:
        allOf:
          - $ref: '#/definitions/CommentBody'
      likes:
        type: integer
  CommentBody:
    type: object
    properties:
      message:
        type: string
      file:
        type: string
        format: binary
  InvalidRegistrationResponse:
    type: object
    properties:
      reason:
        type: string
        enum:
          - Password too short or dont match regex
          - This is not phone
          - Phone already used
          - This is not email
          - Email already used
  ProfileErrors:
    type: object
    properties:
      reason:
        type: string
        enum:
          - This is not phone
          - Phone same to previous one
          - This is not email
          - Email same to previous one
          - Password too short or dont match regex
          - Password same to previous one
