.release-only: &release-only
  only:
    - master

stages:
  - test
  - build
  - package
  - deploy

before_script:
#Setup project under gopath
 - mkdir -p /go/src/go-team-room
 - cp -r . /go/src/go-team-room
 - cd /go/src/go-team-room

test:
  services:
    - mysql:latest
  image: golang:1.9.2-alpine3.7
  stage: test
  cache:
    paths:
     - /go/src/go-team-room/vendor
  script:
    - apk add --no-cache git
    - go get github.com/golang/dep/cmd/dep
    - dep ensure
    - go test -v ./... #this run all tests

  variables:
    MYSQL_DATABASE: goteamroom
    MYSQL_USER: gohum
    MYSQL_PASSWORD: "${MYSQL_PASS}"
    MYSQL_ROOT_PASSWORD: "${MYSQL_PASS}"

buildServer:
  image: golang:1.9.2-alpine3.7
  stage: build
  cache:
    paths:
     - vendor
  script:
    - apk add --no-cache git
    - go get github.com/golang/dep/cmd/dep
    - dep ensure
    - go build
    - cp go-team-room /builds/Kv-031.Go/go-team-room
  artifacts:
    paths:
      - /builds/Kv-031.Go/go-team-room/go-team-room
  <<: *release-only

buildClient:
    cache:
      paths:
        - client/node_modules
    image: node:alpine
    stage: build
    script:
      - npm install --prefix client
      - npm run build --prefix client
      - cp -r client/dist /builds/Kv-031.Go/go-team-room/client
      - cp -r client/index.html /builds/Kv-031.Go/go-team-room/client
    artifacts:
      paths:
        - /builds/Kv-031.Go/go-team-room/client/dist
        - /builds/Kv-031.Go/go-team-room/client/index.html
    <<: *release-only

package:
  stage: package
  image: docker:latest
  script:
    - docker build -t registry.gitlab.com/kv-031.go/go-team-room .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker push registry.gitlab.com/kv-031.go/go-team-room
  <<: *release-only

deploy:
  when: manual
  stage: deploy
  image: python:3-alpine
  services:
    - docker:dind
  script:
      - apk add --update curl
      - curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
      - chmod +x /usr/local/bin/ecs-cli
      - source generate_config.sh $GO_AWS_ACCESS_KEY_ID $GO_AWS_SECRET_ACCESS_KEY $GO_AWS_DYNAMO_ENDPOINT $GO_AWS_DYNAMO_REGION $DEPLOY_MYSQL_DSN
      - ecs-cli configure profile --profile-name default --access-key $AWS_DELPOY_ACCESS_KEY_ID --secret-key $AWS_DEPLOY_SECRET_ACCESS_KEY
      - ecs-cli compose --region $AWS_DEPLOY_REGION --cluster $AWS_DEPLOY_CLUSTER --project-name $AWS_DEPLOY_PROJECT_NAME --file docker-compose.yml service up --container-name gohum --container-port 80

  <<: *release-only
